# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-10-11 01:23
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(help_text='Email that will be used as username.', max_length=254, unique=True, verbose_name='E-mail')),
                ('name', models.CharField(help_text='Full user name.', max_length=150, verbose_name='Name')),
                ('institution', models.CharField(blank=True, help_text='University or School in which the user is inserted.', max_length=100, verbose_name='Institution')),
                ('course', models.CharField(blank=True, help_text='Course of university or Period of school.', max_length=100, verbose_name='Course')),
                ('photo', models.ImageField(blank=True, help_text='Photo of user.', null=True, upload_to='accounts', verbose_name='Photo')),
                ('is_teacher', models.BooleanField(default=False, help_text='Verify if the user is teacher or student', verbose_name='Is Teacher?')),
                ('is_active', models.BooleanField(default=True, help_text='Verify if the user is active.', verbose_name='Is Active?')),
                ('is_staff', models.BooleanField(default=False, help_text='Verify if the user is a staff.', verbose_name='Is Staff?')),
                ('last_login', models.DateTimeField(blank=True, help_text='Last moment the user logged in.', null=True, verbose_name='Last Login')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date that the user is created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date that the user is updated.', verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ('email',),
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
            bases=('accounts.user',),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
            },
            bases=('accounts.user',),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
