# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-01-23 21:02
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('questions', '0008_auto_20180116_0120'),
        ('TBLSessions', '0004_auto_20180115_2339'),
        ('groups', '0004_remove_group__is_closed'),
    ]

    operations = [
        migrations.CreateModel(
            name='APP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=0, help_text='Practical test final score.', verbose_name='Score')),
                ('description', models.TextField(help_text='Practical test description', verbose_name='Description')),
                ('is_closed', models.BooleanField(default=True, help_text='Verify if the test is closed, if open the students can                      see and answer the test.', verbose_name='Is closed?')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date that the practical test is created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date that the practical test is updated.', verbose_name='Updated at')),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='TBLSessions.TBLSession')),
            ],
            options={
                'verbose_name': 'Practical test',
                'verbose_name_plural': 'Practical test',
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=0, help_text='Exam final score.', verbose_name='Score')),
                ('time', models.DateTimeField(help_text='Time to answer the test.', verbose_name='Time to answer.')),
                ('is_closed', models.BooleanField(default=True, help_text='Verify if the test is closed, if open the students can                      see and answer the test.', verbose_name='Is closed?')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date that the exam is created.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date that the exam is updated.', verbose_name='Updated at')),
            ],
            options={
                'ordering': ['score', 'created_at'],
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
            },
        ),
        migrations.CreateModel(
            name='gRAT',
            fields=[
                ('exam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='exam.Exam')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='groups.Group')),
            ],
            bases=('exam.exam',),
        ),
        migrations.CreateModel(
            name='iRAT',
            fields=[
                ('exam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='exam.Exam')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('exam.exam',),
        ),
        migrations.AddField(
            model_name='exam',
            name='questions',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questions.Question', verbose_name='Exam questions'),
        ),
        migrations.AddField(
            model_name='exam',
            name='session',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='TBLSessions.TBLSession'),
        ),
    ]
